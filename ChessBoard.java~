import java.util.*;
public class ChessBoard extends Board
{
	private ArrayList<Piece> lostWhite;
	private ArrayList<Piece> lostBlack;
	public ChessBoard(){
		super();
		lostWhite = new ArrayList<Piece>();
		lostBlack = new ArrayList<Piece>();
	}
	
	public void startGrid(){
		startBlack();
		startWhite();
	}
	
	public void startBlack(){
		place(new Rook('b', 0, 0), new Location(0, 0));
		place(new Rook('b', 0, 7), new Location(0, 7));
		place(new Knight('b', 0, 1), new Location(0, 1));
		place(new Knight('b', 0, 6), new Location(0, 6));
		place(new Bishop('b', 0, 2), new Location(0, 2));
		place(new Bishop('b', 0, 5), new Location(0, 5));
		place(new King('b', 0, 3), new Location(0, 3));
		place(new Queen('b', 0, 4), new Location(0, 4));
		for (int x = 0; x < 8; x++){
			place(new Pawn('b', 1, x), new Location(1, x));}
	}
	
	public void startWhite(){
		place(new Rook('w', 7, 0), new Location(7, 0));
		place(new Rook('w', 7, 7), new Location(7, 7));
		place(new Knight('w', 7, 1), new Location(7, 1));
		place(new Knight('w', 7, 6), new Location(7, 6));
		place(new Bishop('w', 7, 2), new Location(7, 2));
		place(new Bishop('w', 7, 5), new Location(7, 5));
		place(new King('w', 7, 3), new Location(7, 3));
		place(new Queen('w', 7, 4), new Location(7, 4));
		for (int x = 0; x < 8; x++){
			place(new Pawn('w', 6, x), new Location(6, x));}
	}
	
	public void displayMoves(Piece piece){
		ArrayList<Location> moves = piece.getMoves();
		System.out.println("\t0\t1\t2\t3\t4\t5\t6\t7");
		for (int x = 0; x < 8; x++){
			System.out.print(x + "\t");
			for (int y = 0; y < 8; y++){
				if (grid[x][y] == null){
					boolean bol = false;
					for (Location loc : moves){
						if (x == loc.getRow() && y == loc.getCol()){
							System.out.print("x\t");
							bol = true;
							}
					}
					if (bol == false){
						System.out.printf(".\t");}
				}
				else{
					for (Location loc : moves){
						if (x == loc.getRow() && y == loc.getCol()){
							System.out.print("x");}
					}
					System.out.printf("%s\t", grid[x][y]);}
				}
			System.out.println();
		}
	}
	
	public void movePiece(Location loc1, Location loc2, char side){
		if (getPiece(loc1) instanceof Pawn){
			getPiece(loc1).hasMoved();}
		if (side == 'w' && getPiece(loc2) != null){
			lostBlack.add(remove(loc2));}
		if (side == 'b' && getPiece(loc2) != null){
			lostWhite.add(remove(loc2));}
		place(remove(loc1), loc2);
	}

	public char isValidMove(Location loc, char side){
		if (getPiece(loc) == null){
			return 'n';}
		else if (getPiece(loc).getSide() == side){
			return 'p';}
		else{
			return 'o';}
	}
	
	public String checkBoard(char side){
		if (checkCheck(side)){
			if (checkMate(side)){
				return "checkmate by " + side;}
			return "check by " + side;}
		return "";
	}

	public ArrayList<Piece> getPieces(char side){
		ArrayList<Piece> pieces = new ArrayList<Piece>();
		for (int x = 0; x < 8; x++){
			for (int y = 0; y < 8; y++){
				if (grid[x][y] != null && grid[x][y].getSide() == side){
					pieces.add(grid[x][y]);}
			}
		}
		return null;
	}

	public Piece getKing(char side){
		for (int x = 0; x < 8; x++){
			for (int y = 0; y < 8; y++){
				if (grid[x][y] instanceof King && grid[x][y].getSide() == side){
					return grid[x][y];}
			}
		}
		return null;
	}
	
	public boolean checkCheck(char side){
		Piece king;
		if (side == 'w'){
			king = getKing('b');}
		else{
			king = getKing('w');}
		ArrayList<Piece> pieces = getPieces(side);
		for (Piece p : pieces){
			ArrayList<Location> moves = p.getMoves();
			for (Location loc : moves){
				if (loc == king.getLocation()){
					return true;}
			}
		}
		return false;
	}

	public boolean checkMate(char side){
		Piece king = getKing(side);
		ArrayList<Location> movableLocations = king.getMoves();
		movableLocations.add(king.getLocation());
		for (Location loc : movableLocations){
			if (!mateHelper(loc, side)){
				return false;}
		}
		return true;
	}

	public boolean mateHelper(Location loc, char side){
		ArrayList<Piece> pieces = getPieces(side);
		for (Piece p : pieces){
			ArrayList<Location> locations = p.getMoves();
			for (Location l : locations){
			       if (l == loc){
			       		return true;}
			}
	 	}
		return false;
	}		
	
	public void printLost(){
		String wstr = "White: ";
		for (Piece p : lostWhite){
			wstr += p + " ";}
		String bstr = "Black: ";
		for (Piece p : lostBlack){
			bstr += p + " ";}
		System.out.println(wstr);
		System.out.println(bstr);
	}
}
